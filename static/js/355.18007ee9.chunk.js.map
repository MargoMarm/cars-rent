{"version":3,"file":"static/js/355.18007ee9.chunk.js","mappings":"oOAGaA,EAAeC,EAAAA,EAAAA,OAAH,sWACdC,EAAAA,EAAAA,QAIKA,EAAAA,EAAAA,SACH,SAACC,GAAD,OAAWA,EAAMC,OAAjB,GAWKF,EAAAA,EAAAA,c,SCLlB,EAZe,SAAC,GAAuB,IAArBE,EAAoB,EAApBA,QAASC,EAAW,EAAXA,KACzB,OACE,SAACL,EAAD,CAAcM,KAAK,SAASF,QAASA,EAArC,SACGC,GAGN,ECNYE,EAAON,EAAAA,EAAAA,GAAH,yCAIJO,EAAMP,EAAAA,EAAAA,IAAH,mIASHQ,EAAcR,EAAAA,EAAAA,IAAH,qEAKXS,EAAWT,EAAAA,EAAAA,EAAH,mLACVC,EAAAA,EAAAA,UAUES,EAAYV,EAAAA,EAAAA,KAAH,sCACXC,EAAAA,EAAAA,SAGEU,EAAOX,EAAAA,EAAAA,GAAH,sgBAQNC,EAAAA,EAAAA,eCFX,EA9Ba,SAAC,GAAY,IAAD,EAAVW,EAAU,EAAVA,KACbC,QAAQC,IAAIF,GAEb,IAAMG,GAAUC,EAAAA,EAAAA,GAAeJ,EAAKG,SAEnC,OACE,UAACT,EAAD,YACE,SAACC,EAAD,CAAKU,IAAG,OAAEL,QAAF,IAAEA,OAAF,EAAEA,EAAMM,IAAKC,IAAG,OAAEP,QAAF,IAAEA,OAAF,EAAEA,EAAMQ,QAChC,UAACZ,EAAD,YACE,UAACC,EAAD,YACE,mCACGG,QADH,IACGA,OADH,EACGA,EAAMQ,KAAK,KAAC,SAACV,EAAD,iBAAYE,QAAZ,IAAYA,OAAZ,EAAYA,EAAMS,QAAkB,KADnD,OACsDT,QADtD,IACsDA,OADtD,EACsDA,EAAMU,SAE5D,iCAAOV,QAAP,IAAOA,OAAP,EAAOA,EAAMW,kBAEf,UAACZ,EAAD,YACE,+BAAKI,QAAL,IAAKA,OAAL,EAAKA,EAASS,QACd,+BAAKT,QAAL,IAAKA,OAAL,EAAKA,EAASU,WACd,wBAAKb,EAAKc,iBACV,wBAAKd,EAAKP,QACV,wBAAKO,EAAKS,SACV,wBAAKT,EAAKe,MACV,kCAAKf,EAAKgB,uBAAV,aAAK,EAAuB,YAGhC,SAAC,EAAD,CAAQxB,KAAM,aAAcD,QAAS,gBAG1C,E,SCxCY0B,EAAa,SAACC,GAAD,OAAWA,EAAMC,KAAKA,IAAtB,E,kBCEbC,EAAchC,EAAAA,EAAAA,IAAH,uFAMXW,EAAOX,EAAAA,EAAAA,GAAH,+LCqBjB,EAtBgB,WACd,IAAMiC,GAAUC,EAAAA,EAAAA,OAEhBC,EAAAA,EAAAA,YAAU,WACRF,GAAQG,EAAAA,EAAAA,KACT,GAAE,CAACH,IAEJ,IAAMF,GAAOM,EAAAA,EAAAA,IAAYR,GAEzB,OADAhB,QAAQC,IAAIiB,IAEV,SAACC,EAAD,WACE,2BACE,SAAC,EAAD,UACGD,EAAKO,KAAI,SAACC,GACT,OAAO,SAAC,EAAD,CAAmB3B,KAAM2B,GAAdA,EAAIZ,GACvB,SAKV,C","sources":["components/Buttons/Button.styles.jsx","components/Buttons/Buttons.jsx","components/Card/Card.styled.jsx","components/Card/Card.jsx","redux/Cars/selectors.js","pages/Catalog/Catalog.styled.jsx","pages/Catalog/Catalog.jsx"],"sourcesContent":["import styled from \"@emotion/styled\";\nimport { colors } from \"utils\";\n\nexport const ButtonStyled = styled.button`\n  color: ${colors.btnText};\n  font-weight: 600;\n  line-height: 142.857%;\n\n  background: ${colors.btnMain};\n  padding: ${(props) => props.padding};\n  border-radius: 12px;\n  border: none;\n\n  font-size: 14px;\n  font-weight: 600;\n  line-height: 142.857%;\n\n  transition: background 350ms cubic-bezier(0.17, 0.67, 0.83, 0.67);\n  &:hover,\n  &:focus {\n    background: ${colors.btnSecondary};\n  }\n`;\n","import PropTypes from \"prop-types\";\nimport { ButtonStyled } from \"./Button.styles\";\n\nconst Button = ({ padding, text }) => {\n  return (\n    <ButtonStyled type=\"button\" padding={padding}>\n      {text}\n    </ButtonStyled>\n  );\n};\n\nButton.propTypes = {\n\tpadding: PropTypes.string,\n\ttext: PropTypes.string,\n};\nexport default Button;\n","import styled from \"@emotion/styled\";\nimport { colors } from \"utils\";\n\nexport const Item = styled.li`\n  width: 274px;\n`;\n\nexport const Img = styled.img`\n  width: 274px;\n  height: 268px;\n  object-fit: cover;\n\n  border-radius: 14px;\n  margin-bottom: 14px;\n`;\n\nexport const TextWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const MainInfo = styled.p`\n  color: ${colors.textMain};\n  font-size: 16px;\n  font-weight: 500;\n  line-height: 150%;\n\n  margin-bottom: 8px;\n  display: flex;\n  justify-content: space-between;\n`;\n\nexport const Highlight = styled.span`\n  color: ${colors.btnMain};\n`;\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  height: 40px;\n  width: 100%;\n\n  margin-bottom: 28px;\n\n  color: ${colors.textSecondary};\n  font-size: 12px;\n  line-height: 150%;\n\n  & > li {\n    position: relative;\n    &:not(:last-child) {\n      margin-right: 12px;\n    }\n    &:not(:last-child)::after {\n      content: \"\";\n      position: absolute;\n      display: block;\n      width: 1px;\n      background-color: rgba(18, 20, 23, 0.1);\n      height: 16px;\n      top: 2px;\n      right: -6px;\n    }\n  }\n`;\n","import Button from \"components/Buttons/Buttons\";\nimport {\n  Highlight,\n  Img,\n  Item,\n  List,\n  MainInfo,\n  TextWrapper,\n} from \"./Card.styled\";\n\nimport { extractAddress } from \"utils\";\n\nconst Card = ({data}) => {\n  console.log(data);\n\n\tconst address = extractAddress(data.address);\n\t\n  return (\n    <Item>\n      <Img src={data?.img} alt={data?.make} />\n      <TextWrapper>\n        <MainInfo>\n          <span>\n            {data?.make} <Highlight>{data?.model}</Highlight>, {data?.year}\n          </span>\n          <span>{data?.rentalPrice}</span>\n        </MainInfo>\n        <List>\n          <li>{address?.city}</li>\n          <li>{address?.country}</li>\n          <li>{data.rentalCompany}</li>\n          <li>{data.type}</li>\n          <li>{data.model}</li>\n          <li>{data.id}</li>\n          <li>{data.functionalities?.[0]}</li>\n        </List>\n      </TextWrapper>\n      <Button text={\"Learn more\"} padding={\"12px 98px\"}/>\n    </Item>\n  );\n};\n\nexport default Card;\n","export const selectCars = (state) => state.cars.cars;\n\nexport const selectError = (state) => state.cars.error;\n\nexport const selectIsLoadinf = (state) => state.cars.isLoading;\n","import styled from \"@emotion/styled\";\n\nexport const PageWrapper = styled.div`\npadding-right:58px;\npadding-left: 163px;\npadding-top: 70px;\n`\n\nexport const List = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  grid-template-rows: repeat(3, 1fr);\n  grid-column-gap: 29px;\n  grid-row-gap: 50px;\n\n  width: 635px;\n`;\n","import Card from \"components/Card/Card\";\nimport { useEffect } from \"react\";\nimport { selectCars } from \"redux/Cars/selectors\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchCars } from \"redux/Cars/operations\";\nimport { List, PageWrapper } from \"./Catalog.styled\";\n\nconst Catalot = () => {\n  const dispach = useDispatch();\n\n  useEffect(() => {\n    dispach(fetchCars());\n  }, [dispach]);\n\n  const cars = useSelector(selectCars);\n  console.log(cars);\n  return (\n    <PageWrapper>\n      <main>\n        <List>\n          {cars.map((car) => {\n            return <Card key={car.id} data={car} />;\n          })}\n        </List>\n      </main>\n    </PageWrapper>\n  );\n};\n\nexport default Catalot;\n"],"names":["ButtonStyled","styled","colors","props","padding","text","type","Item","Img","TextWrapper","MainInfo","Highlight","List","data","console","log","address","extractAddress","src","img","alt","make","model","year","rentalPrice","city","country","rentalCompany","id","functionalities","selectCars","state","cars","PageWrapper","dispach","useDispatch","useEffect","fetchCars","useSelector","map","car"],"sourceRoot":""}